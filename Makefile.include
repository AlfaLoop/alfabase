uniq = $(if $1,$(firstword $1) $(call uniq,$(filter-out $(firstword $1),$1)))

MODULES = core
MODULES += core/dev
MODULES += FreeRTOS
MODULES += fs
MODULES += fs/spiffs
MODULES += libs
MODULES += libs/crypto
MODULES += libs/util

ifeq ($(USE_CONTIKI), 1)
	MODULES += core/sys
endif

ifeq ($(USE_NEST_STACK), 1)
	MODULES += core/nest
endif

ifeq ($(USE_ELFLOADER),1)
	PROJECTDIRS += $(PROJECT)/core/loader
	PROJECT_SOURCEFILES += symtab.c elfloader.c symbol-std.c lunchr.c
endif

ifeq ($(USE_FRAMEWORK),1)
	MODULES += frameworks
	MODULES += frameworks/core
	MODULES += frameworks/hw
	MODULES += frameworks/ble
endif

ifeq ($(USE_DRIVERS_INV_MPU_DMP),1)
	PROJECTDIRS += $(PROJECT)/libs/sensors/inv_mpu
	PROJECTDIRS += $(PROJECT)/libs/sensors/inv_mpu/eMPL-hal
	PROJECTDIRS += $(PROJECT)/libs/sensors/inv_mpu/mllite
	PROJECTDIRS += $(PROJECT)/libs/sensors/inv_mpu/include
	PROJECTDIRS += $(PROJECT)/libs/sensors/inv_mpu/mpl
	PROJECT_SOURCEFILES += inv_mpu.c
	PROJECT_SOURCEFILES += data_builder.c hal_outputs.c message_layer.c ml_math_func.c mlmath.c mpl.c results_holder.c start_manager.c storage_manager.c
	PROJECT_SOURCEFILES += inv_mpu_dmp_motion_driver.c
	PROJECT_SOURCEFILES += eMPL_outputs.c
endif

ifdef MODULES
  UNIQUEMODULES = $(call uniq,$(MODULES))
  MODULESSUBST = ${subst /,-,$(UNIQUEMODULES)}
  MODULEDIRS = ${wildcard ${addprefix $(PROJECT)/, $(UNIQUEMODULES)}}
  MODULES_SOURCES = ${foreach d, $(MODULEDIRS), ${subst ${d}/,,${wildcard $(d)/*.c}}}
  PROJECT_SOURCEFILES += $(MODULES_SOURCES)
  APPDS += $(MODULEDIRS)
endif

### Verbosity control. Use  make V=1  to get verbose builds.

ifeq ($(V),1)
  TRACE_CC =
  TRACE_LD =
  TRACE_AR =
  TRACE_AS =
  Q=
else
  TRACE_CC = @echo "  CC       " $<
  TRACE_LD = @echo "  LD       " $@
  TRACE_AR = @echo "  AR       " $@
  TRACE_AS = @echo "  AS       " $<
  Q=@
endif

### Forward comma-separated list of arbitrary defines to the compiler

COMMA := ,
CFLAGS += ${addprefix -D,${subst $(COMMA), ,$(DEFINES)}}

### Setup directory search path for source and header files

PROJECT_TARGET_DIRS_CONCAT = ${addprefix ${dir $(target_makefile)}, \
                               $(PROJECT_TARGET_DIRS)}
PROJECT_CPU_DIRS_CONCAT    = ${addprefix $(PROJECT_ARCH)/, \
                               $(PROJECT_ARCH_DIRS)}

SOURCEDIRS = . $(PROJECTDIRS) $(PROJECT_TARGET_DIRS_CONCAT) \
             $(PROJECT_CPU_DIRS_CONCAT) $(PROJECTDIRS) $(APPDS) ${dir $(target_makefile)}

vpath %.c $(SOURCEDIRS)
vpath %.cpp $(SOURCEDIRS)
vpath %.S $(SOURCEDIRS)

CFLAGS += ${addprefix -I,$(SOURCEDIRS) $(PROJECT)}
CPPFLAGS += ${addprefix -I,$(SOURCEDIRS) $(PROJECT)}

### Check for a git repo and pass version if found
### git.exe in Windows cmd shells may require no stderr redirection
#RELSTR=${shell git describe --tags}
RELSTR=${shell git describe --tags 2>/dev/null}
ifneq ($(RELSTR),)
CFLAGS += -DPROJECT_VERSION_STRING=\"PROJECT-$(RELSTR)\"
endif

### Automatic dependency generation

ifneq ($(MAKECMDGOALS),clean)
-include ${addprefix $(OBJECTDIR)/,$(PROJECT_SOURCEFILES:.c=.d) \
                                   $(PROJECT_SOURCEFILES:.c=.d) \
								   $(PROJECT_SOURCEFILES:.cpp=.d)}
endif

### See http://make.paulandlesley.org/autodep.html#advanced

define FINALIZE_DEPENDENCY
cp $(@:.o=.d) $(@:.o=.$$$$); \
sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
    -e '/^$$/ d' -e 's/$$/ :/' < $(@:.o=.$$$$) >> $(@:.o=.d); \
rm -f $(@:.o=.$$$$)
endef

clean:
	-rm -f *~ *core core *.srec \
	*.lst *.map \
	*.cprg *.bin *.data *.a *.firmware core-labels.S *.ihex *.ini \
	*.ce *.co \
	symbols.c symbols.h
	rm -rf $(CLEAN)
	-rm -rf $(OBJECTDIR)

distclean: clean
	-rm -rf $(PROJECT_MAIN).$(TARGET)

-include $(PROJECT)/platform/$(TARGET)/Makefile.customrules-$(TARGET)

ifndef CUSTOM_RULE_C_TO_CE
%.ce: %.c
	$(TRACE_CC)
	$(Q)$(CC) $(CFLAGS) -DAUTOSTART_ENABLE -c $< -o $@
	$(STRIP) --strip-unneeded -g -x $@
endif

ifndef CUSTOM_RULE_C_TO_OBJECTDIR_O
$(OBJECTDIR)/%.o: %.c | $(OBJECTDIR)
	$(TRACE_CC)
	$(Q)$(CC) $(CFLAGS) -MMD -c $< -o $@
	@$(FINALIZE_DEPENDENCY)
endif

ifndef CUSTOM_RULE_CPP_TO_OBJECTDIR_O
$(OBJECTDIR)/%.o: %.cpp | $(OBJECTDIR)
	$(CPP) $(CPPFLAGS) -MMD -c $< -o $@
	@$(FINALIZE_DEPENDENCY)
endif

ifndef CUSTOM_RULE_S_TO_OBJECTDIR_O
$(OBJECTDIR)/%.o: %.S | $(OBJECTDIR)
	$(TRACE_AS)
	$(Q)$(AS) $(ASFLAGS) -o $@ $<
endif

ifndef CUSTOM_RULE_C_TO_O
%.o: %.c
	$(TRACE_CC)
	$(Q)$(CC) $(CFLAGS) -c $< -o $@
endif

ifndef CUSTOM_RULE_CPP_TO_O
%.o: %.cpp
	$(CPP) $(CPPFLAGS) -c $< -o $@
endif

ifndef CUSTOM_RULE_C_TO_CO
%.co: %.c
	$(TRACE_CC)
	$(Q)$(CC) $(CFLAGS) -DAUTOSTART_ENABLE -c $< -o $@
endif

ifndef AROPTS
  AROPTS = rcf
endif

ifndef CUSTOM_RULE_ALLOBJS_TO_TARGETLIB
$(TARGET).a: $(PROJECT_OBJECTFILES)
	$(TRACE_AR)
	$(Q)$(AR) $(AROPTS) $@ $^
endif

ifndef LD
  LD = $(CC)
endif

ifndef CUSTOM_RULE_LINK
%.$(TARGET): %.co $(PROJECT_OBJECTFILES) $(PROJECT_LIBRARIES) $(TARGET).a
	$(TRACE_LD)
	$(Q)$(LD) $(LDFLAGS) $(TARGET_STARTFILES) ${filter-out %.a,$^} \
	    ${filter %.a,$^} $(TARGET_LIBFILES) -o $@
endif

%.ramprof: %.$(TARGET)
	$(NM) -S -td --size-sort $< | grep -i " [abdrw] " | cut -d' ' -f2,4

%.flashprof: %.$(TARGET)
	$(NM) -S -td --size-sort $< | grep -i " [t] " | cut -d' ' -f2,4

# Don't treat %.$(TARGET) as an intermediate file because it is
# in fact the primary target.
.PRECIOUS: %.$(TARGET)

# Cancel the predefined implict rule for compiling and linking
# a single C source into a binary to force GNU make to consider
# the match-anything rule below instead.
%: %.c


# Match-anything pattern rule to allow the project makefiles to
# abstract from the actual binary name. It needs to contain some
# command in order to be a rule, not just a prerequisite.
%: %.$(TARGET)
	@
